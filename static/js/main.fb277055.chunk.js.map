{"version":3,"sources":["components/ContextWrapper.js","services/gistService.js","components/Search.js","components/Header.js","GlobalStyle.js","screens/Gists.js","App.js","index.js"],"names":["Context","React","createContext","ContextWrapper","props","useState","username","setUsername","gists","setGists","error","setError","Provider","value","handleSetUsername","handleSetGists","handleSetError","children","octokit","Octokit","getPublicGists","listPublic","Wrapper","styled","div","InputBox","Input","input","Search","context","useContext","useEffect","a","publicGists","data","handleKeyDown","event","key","target","listForUser","userGists","name","placeholder","onKeyDown","Header","mega","GlobalStyles","createGlobalStyle","useStyles","makeStyles","theme","paper","padding","containerDiv","width","breakpoints","down","center","display","justifyContent","alignItems","typographyName","fontSize","color","textDecoration","cursor","marginLeft","metaDataTypography","metaDataIcons","marginTop","typographySubText","typographyDescription","fontWeight","paddingTop","paddingBottom","Gists","classes","Container","maxWidth","style","className","Typography","length","map","gist","index","Fragment","Paper","elevation","Grid","container","item","xs","md","List","href","owner","html_url","ListItem","ListItemAvatar","Avatar","src","avatar_url","ListItemText","primary","login","id","Object","keys","files","comments","moment","created_at","format","updated_at","description","raw_url","Divider","marginBottom","App","data-testid","GlobalStyle","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fb277055.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nexport const Context = React.createContext();\r\n\r\nconst ContextWrapper = props => {\r\n    // I opted to use Context API instead of Redux because of low complexity of the project.\r\n    const [username, setUsername] = useState(\"\");\r\n    const [gists, setGists] = useState([]);\r\n    const [error, setError] = useState(\"\");\r\n\r\n    const handleSetUsername = username => {\r\n        setUsername(username);\r\n    }\r\n\r\n    const handleSetGists = gists => {\r\n        setGists(gists);\r\n    }\r\n\r\n    const handleSetError = error => {\r\n        setError(error);\r\n    }\r\n\r\n    return (\r\n        <Context.Provider value={{ username, handleSetUsername, handleSetGists, gists, error, handleSetError }}>\r\n            {props.children}\r\n        </Context.Provider>\r\n    )\r\n}\r\n\r\nexport default ContextWrapper;\r\n","import { Octokit } from \"@octokit/rest\";\r\nconst octokit = new Octokit()\r\n\r\nexport const getPublicGists = () => octokit.gists.listPublic()\r\n\r\nexport const getGistForUser = username =>  octokit.gists.listForUser({ username });","import React, { useEffect, useContext } from 'react';\r\nimport styled from 'styled-components'\r\nimport Octicon from 'react-octicon'\r\nimport { Context } from './ContextWrapper'\r\nimport { getGistForUser, getPublicGists } from '../services/gistService';\r\n\r\nconst Search = () => {\r\n  const context = useContext(Context);\r\n  const {\r\n    handleSetUsername,\r\n    handleSetGists,\r\n    handleSetError,\r\n  } = context;\r\n\r\n  useEffect(async () => {\r\n    const publicGists = await getPublicGists();\r\n    await handleSetGists(publicGists.data);\r\n  }, [])\r\n\r\n  const handleKeyDown = async event => {\r\n    if (event.key === 'Enter') {\r\n      handleSetUsername(event.target.value);\r\n      if (event.target.value) {\r\n        try {\r\n          const userGists = await getGistForUser(event.target.value);\r\n          await handleSetGists(userGists.data);\r\n          handleSetError(\"\");\r\n        } catch (error) {\r\n          handleSetError(\"User Not Found\");\r\n          handleSetGists([]);\r\n        }\r\n      } else {\r\n        handleSetError(\"\");\r\n        const publicGists = await getPublicGists();\r\n        await handleSetGists(publicGists.data);\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Wrapper>\r\n      <InputBox>\r\n        <Octicon name=\"search\" />\r\n        <Input\r\n          placeholder=\"Search Gists for the username\"\r\n          onKeyDown={handleKeyDown}\r\n        />\r\n      </InputBox>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  padding: 8px;\r\n  background-color: #ffffff;\r\n  font-size: 14px;\r\n  line-height: 1.5;\r\n  border-radius: 6px;\r\n  margin: 0 16px;\r\n`;\r\n\r\nconst InputBox = styled.div`\r\n  border-radius: 4px;\r\n  display: flex;\r\n  width: 400px;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  border: none;\r\n  width: 100%;\r\n  font-size: 16px;\r\n\r\n  &:focus{\r\n    outline: 0;\r\n  }\r\n`;\r\n\r\nexport default Search\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport Octicon from 'react-octicon'\r\nimport Search from './Search';\r\n\r\nfunction Header() {\r\n  return (\r\n    <Wrapper>\r\n      <Octicon name=\"mark-github\" mega />\r\n      <Search />\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  background-color: #24292e;\r\n  color: #ffffff;\r\n  z-index: 32;\r\n  padding: 16px;\r\n  font-size: 14px;\r\n  line-height: 1.5;\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n\r\nexport default Header\r\n","import { createGlobalStyle } from 'styled-components';\r\n\r\nconst GlobalStyles = createGlobalStyle`\r\n  body{\r\n    margin: 0;\r\n    font-family: Helvetica Neue,Helvetica,Segoe UI,Arial,freesans,sans-serif;\r\n    color: #626465;\r\n  }\r\n  *{\r\n    box-sizing: border-box;\r\n  }\r\n`;\r\n\r\nexport default GlobalStyles;\r\n","import React, { useContext } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {\r\n    Avatar,\r\n    Container,\r\n    Divider,\r\n    Grid,\r\n    List,\r\n    ListItem,\r\n    ListItemAvatar,\r\n    ListItemText,\r\n    Paper,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport { Context } from '../components/ContextWrapper';\r\nimport CodeIcon from '@material-ui/icons/Code';\r\nimport RestaurantIcon from '@material-ui/icons/Restaurant';\r\nimport ChatBubbleOutlineIcon from '@material-ui/icons/ChatBubbleOutline';\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\nimport moment from 'moment';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        padding: 10,\r\n    },\r\n    containerDiv: {\r\n        width: 600,\r\n        [theme.breakpoints.down('sm')]: {\r\n            width: \"100%\"\r\n        }\r\n    },\r\n    center: {\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n    },\r\n    typographyName: {\r\n        fontSize: 12,\r\n        color: \"blue\",\r\n        textDecoration: \"underline\",\r\n        cursor: \"pointer\",\r\n        marginLeft: -5\r\n    },\r\n    metaDataTypography: {\r\n        fontSize: 12,\r\n        color: \"blue\",\r\n        textDecoration: \"underline\",\r\n        cursor: \"pointer\",\r\n        marginLeft: -27,\r\n    },\r\n    metaDataIcons: {\r\n        marginTop: 7,\r\n        color: \"blue\",\r\n    },\r\n    typographySubText: {\r\n        fontSize: 12,\r\n    },\r\n    typographyDescription: {\r\n        fontSize: 16,\r\n        fontWeight: \"bold\",\r\n        paddingTop: 20,\r\n        paddingBottom: 20,\r\n    }\r\n}));\r\n\r\n\r\nfunction Gists() {\r\n    const context = useContext(Context);\r\n    const {\r\n        gists,\r\n        username,\r\n        error,\r\n    } = context;\r\n    const classes = useStyles();\r\n    const {\r\n        paper,\r\n        containerDiv,\r\n        center,\r\n        typographyName,\r\n        metaDataTypography,\r\n        metaDataIcons,\r\n        typographySubText,\r\n        typographyDescription,\r\n    } = classes;\r\n\r\n    return (\r\n        <>\r\n            <Container maxWidth=\"md\" style={{ marginTop: 50 }}>\r\n                <div className={center}>\r\n                    <div className={containerDiv}>\r\n                        {\r\n                            error\r\n                                ?\r\n                                <Typography>\r\n                                    {error}\r\n                                </Typography>\r\n                                :\r\n                                <Typography>\r\n                                    Showing {username ? username : \"public\"} gists\r\n                                </Typography>\r\n                        }\r\n                        {\r\n                            gists &&\r\n                            gists.length > 0 &&\r\n                            gists.map((gist, index) => {\r\n                                // We could break this into seprate component for reusability\r\n                                return (\r\n                                    <React.Fragment key={index}>\r\n                                        <Paper className={paper} elevation={4}>\r\n                                            <Grid container>\r\n                                                <Grid item xs={12} md={5}>\r\n                                                    <List>\r\n                                                        <a\r\n                                                            href={gist.owner.html_url}\r\n                                                            target=\"_blank\"\r\n                                                            style={{ textDecoration: \"none\" }}\r\n                                                        >\r\n                                                            <ListItem>\r\n                                                                <ListItemAvatar>\r\n                                                                    <Avatar\r\n                                                                        src={gist.owner.avatar_url}\r\n                                                                    />\r\n                                                                </ListItemAvatar>\r\n                                                                <ListItemText primary={\r\n                                                                    <Typography className={typographyName}>\r\n                                                                        {gist.owner.login}\r\n                                                                    </Typography>\r\n                                                                } />\r\n                                                            </ListItem>\r\n                                                        </a>\r\n                                                    </List>\r\n                                                </Grid>\r\n                                                <Grid item xs={4} md={2}>\r\n                                                    <List>\r\n                                                        <a\r\n                                                            href={`https://gist.github.com/${gist.owner.login}/${gist.id}`}\r\n                                                            target=\"_blank\"\r\n                                                            style={{ textDecoration: \"none\" }}\r\n                                                        >\r\n                                                            <ListItem>\r\n                                                                <ListItemAvatar>\r\n                                                                    <CodeIcon className={metaDataIcons} />\r\n                                                                </ListItemAvatar>\r\n                                                                <ListItemText primary={\r\n                                                                    <Typography className={metaDataTypography}>\r\n                                                                        {Object.keys(gist.files).length} Files\r\n                                                                </Typography>\r\n                                                                } />\r\n                                                            </ListItem>\r\n                                                        </a>\r\n                                                    </List>\r\n                                                </Grid>\r\n                                                <Grid item xs={4} md={2}>\r\n                                                    <List>\r\n                                                        <a\r\n                                                            href={`https://gist.github.com/${gist.owner.login}/${gist.id}/forks`}\r\n                                                            target=\"_blank\"\r\n                                                            style={{ textDecoration: \"none\" }}\r\n                                                        >\r\n                                                            <ListItem>\r\n                                                                <ListItemAvatar>\r\n                                                                    <RestaurantIcon className={metaDataIcons} />\r\n                                                                </ListItemAvatar>\r\n                                                                <ListItemText primary={\r\n                                                                    <Typography className={metaDataTypography}>\r\n                                                                        Forks\r\n                                                                </Typography>\r\n                                                                } />\r\n                                                            </ListItem>\r\n                                                        </a>\r\n                                                    </List>\r\n                                                </Grid>\r\n                                                <Grid item xs={4} md={3}>\r\n                                                    <List>\r\n                                                        <a\r\n                                                            href={`https://gist.github.com/${gist.owner.login}/${gist.id}#comments`}\r\n                                                            target=\"_blank\"\r\n                                                            style={{ textDecoration: \"none\" }}\r\n                                                        >\r\n                                                            <ListItem>\r\n                                                                <ListItemAvatar>\r\n                                                                    <ChatBubbleOutlineIcon className={metaDataIcons} />\r\n                                                                </ListItemAvatar>\r\n                                                                <ListItemText primary={\r\n                                                                    <Typography className={metaDataTypography}>\r\n                                                                        {gist.comments} Comments\r\n                                                                </Typography>\r\n                                                                } />\r\n                                                            </ListItem>\r\n                                                        </a>\r\n                                                    </List>\r\n                                                </Grid>\r\n                                                <Grid item xs={3}>\r\n                                                    <Typography className={typographySubText}>\r\n                                                        Created at: {moment(gist.created_at).format(\"L\")}\r\n                                                    </Typography>\r\n                                                </Grid>\r\n                                                <Grid item xs={3}>\r\n                                                    <Typography className={typographySubText}>\r\n                                                        Last updated: {moment(gist.updated_at).format(\"L\")}\r\n                                                    </Typography>\r\n                                                </Grid>\r\n                                                <Grid item xs={12}>\r\n                                                    <Typography className={typographyDescription}>\r\n                                                        {gist.description}\r\n                                                    </Typography>\r\n                                                </Grid>\r\n                                                <Grid item xs={12}>\r\n                                                    <Grid container>\r\n                                                        {\r\n                                                            Object.keys(gist.files).map((key) =>\r\n                                                                <Grid item xs>\r\n                                                                    <a href={gist.files[key].raw_url} target=\"_blank\" style={{ textDecoration: \"none\" }}>\r\n                                                                        <ListItem>\r\n                                                                            <ListItemAvatar>\r\n                                                                                <FileCopyIcon className={metaDataIcons} />\r\n                                                                            </ListItemAvatar>\r\n                                                                            <ListItemText primary={\r\n                                                                                <Typography className={metaDataTypography} style={{ textDecoration: \"none\" }}>\r\n                                                                                    {key}\r\n                                                                                </Typography>\r\n                                                                            } />\r\n                                                                        </ListItem>\r\n                                                                    </a>\r\n                                                                </Grid>\r\n                                                            )\r\n                                                        }\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Paper>\r\n                                        <Divider style={{ marginTop: 20, marginBottom: 20 }} />\r\n                                    </React.Fragment>\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Gists;\r\n","\r\nimport styled from 'styled-components'\r\nimport ContextWrapper from './components/ContextWrapper';\r\nimport Header from \"./components/Header\";\r\nimport GlobalStyles from \"./GlobalStyle\";\r\nimport Gists from './screens/Gists';\r\n\r\nconst App = () => {\r\n  return (\r\n    <ContextWrapper>\r\n      <Wrapper className=\"App\" data-testid=\"app\">\r\n        <Header />\r\n        <Gists />\r\n        <GlobalStyles />\r\n      </Wrapper>\r\n    </ContextWrapper>\r\n  );\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  font-size: 14px;\r\n  line-height: 1.5;\r\n`;\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}